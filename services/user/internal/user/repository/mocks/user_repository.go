// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/alifmufthi91/ecommerce-system/services/user/internal/model"

	repository "github.com/alifmufthi91/ecommerce-system/services/user/internal/user/repository"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUser(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmailOrPhone provides a mock function with given fields: ctx, emailOrPhone
func (_m *UserRepository) GetUserByEmailOrPhone(ctx context.Context, emailOrPhone string) (model.User, error) {
	ret := _m.Called(ctx, emailOrPhone)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailOrPhone")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, emailOrPhone)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, emailOrPhone)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, emailOrPhone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithReturning provides a mock function with no fields
func (_m *UserRepository) WithReturning() repository.UserRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithReturning")
	}

	var r0 repository.UserRepository
	if rf, ok := ret.Get(0).(func() repository.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserRepository)
		}
	}

	return r0
}

// WithTX provides a mock function with given fields: tx
func (_m *UserRepository) WithTX(tx *gorm.DB) repository.UserRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 repository.UserRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.UserRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserRepository)
		}
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
