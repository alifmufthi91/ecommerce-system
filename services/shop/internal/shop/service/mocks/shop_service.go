// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alifmufthi91/ecommerce-system/services/shop/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ShopService is an autogenerated mock type for the ShopService type
type ShopService struct {
	mock.Mock
}

// GetShops provides a mock function with given fields: ctx
func (_m *ShopService) GetShops(ctx context.Context) ([]model.Shop, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetShops")
	}

	var r0 []model.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Shop, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Shop); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Shop)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShopService creates a new instance of ShopService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShopService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShopService {
	mock := &ShopService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
