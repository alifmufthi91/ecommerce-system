// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/alifmufthi91/ecommerce-system/services/warehouse/internal/model"

	payload "github.com/alifmufthi91/ecommerce-system/services/warehouse/internal/stock/payload"

	repository "github.com/alifmufthi91/ecommerce-system/services/warehouse/internal/stock/repository"
)

// StockRepository is an autogenerated mock type for the StockRepository type
type StockRepository struct {
	mock.Mock
}

// AddStockQtyAndReserveQty provides a mock function with given fields: ctx, productID, warehouseID, quantity, reserved
func (_m *StockRepository) AddStockQtyAndReserveQty(ctx context.Context, productID string, warehouseID string, quantity int, reserved int) error {
	ret := _m.Called(ctx, productID, warehouseID, quantity, reserved)

	if len(ret) == 0 {
		panic("no return value specified for AddStockQtyAndReserveQty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) error); ok {
		r0 = rf(ctx, productID, warehouseID, quantity, reserved)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStock provides a mock function with given fields: ctx, stock
func (_m *StockRepository) CreateStock(ctx context.Context, stock *model.WarehouseStock) error {
	ret := _m.Called(ctx, stock)

	if len(ret) == 0 {
		panic("no return value specified for CreateStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WarehouseStock) error); ok {
		r0 = rf(ctx, stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStockTransfer provides a mock function with given fields: ctx, transferStock
func (_m *StockRepository) CreateStockTransfer(ctx context.Context, transferStock *model.StockTransfer) error {
	ret := _m.Called(ctx, transferStock)

	if len(ret) == 0 {
		panic("no return value specified for CreateStockTransfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.StockTransfer) error); ok {
		r0 = rf(ctx, transferStock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableStocksByProduct provides a mock function with given fields: ctx, req
func (_m *StockRepository) GetAvailableStocksByProduct(ctx context.Context, req payload.GetStockAvailablesByProductReq) ([]model.GetStockAvailablesByProduct, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableStocksByProduct")
	}

	var r0 []model.GetStockAvailablesByProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStockAvailablesByProductReq) ([]model.GetStockAvailablesByProduct, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStockAvailablesByProductReq) []model.GetStockAvailablesByProduct); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetStockAvailablesByProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.GetStockAvailablesByProductReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStocks provides a mock function with given fields: ctx, req
func (_m *StockRepository) GetStocks(ctx context.Context, req payload.GetStocksReq) ([]model.WarehouseStock, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStocks")
	}

	var r0 []model.WarehouseStock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStocksReq) ([]model.WarehouseStock, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStocksReq) []model.WarehouseStock); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WarehouseStock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.GetStocksReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStock provides a mock function with given fields: ctx, stock
func (_m *StockRepository) UpdateStock(ctx context.Context, stock *model.WarehouseStock) error {
	ret := _m.Called(ctx, stock)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WarehouseStock) error); ok {
		r0 = rf(ctx, stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithLockForUpdate provides a mock function with no fields
func (_m *StockRepository) WithLockForUpdate() repository.StockRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithLockForUpdate")
	}

	var r0 repository.StockRepository
	if rf, ok := ret.Get(0).(func() repository.StockRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.StockRepository)
		}
	}

	return r0
}

// WithReturning provides a mock function with no fields
func (_m *StockRepository) WithReturning() repository.StockRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithReturning")
	}

	var r0 repository.StockRepository
	if rf, ok := ret.Get(0).(func() repository.StockRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.StockRepository)
		}
	}

	return r0
}

// WithTX provides a mock function with given fields: tx
func (_m *StockRepository) WithTX(tx *gorm.DB) repository.StockRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 repository.StockRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.StockRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.StockRepository)
		}
	}

	return r0
}

// NewStockRepository creates a new instance of StockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockRepository {
	mock := &StockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
