// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alifmufthi91/ecommerce-system/services/warehouse/internal/model"
	payload "github.com/alifmufthi91/ecommerce-system/services/warehouse/internal/stock/payload"
	mock "github.com/stretchr/testify/mock"
)

// StockService is an autogenerated mock type for the StockService type
type StockService struct {
	mock.Mock
}

// CommitReserves provides a mock function with given fields: ctx, req
func (_m *StockService) CommitReserves(ctx context.Context, req payload.CommitReservesReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CommitReserves")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.CommitReservesReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStock provides a mock function with given fields: ctx, req
func (_m *StockService) CreateStock(ctx context.Context, req payload.CreateStockReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.CreateStockReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStockAvailablesByProduct provides a mock function with given fields: ctx, req
func (_m *StockService) GetStockAvailablesByProduct(ctx context.Context, req payload.GetStockAvailablesByProductReq) ([]model.GetStockAvailablesByProduct, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStockAvailablesByProduct")
	}

	var r0 []model.GetStockAvailablesByProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStockAvailablesByProductReq) ([]model.GetStockAvailablesByProduct, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStockAvailablesByProductReq) []model.GetStockAvailablesByProduct); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetStockAvailablesByProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.GetStockAvailablesByProductReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStocks provides a mock function with given fields: ctx, req
func (_m *StockService) GetStocks(ctx context.Context, req payload.GetStocksReq) ([]model.WarehouseStock, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStocks")
	}

	var r0 []model.WarehouseStock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStocksReq) ([]model.WarehouseStock, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetStocksReq) []model.WarehouseStock); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WarehouseStock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.GetStocksReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveStocks provides a mock function with given fields: ctx, req
func (_m *StockService) ReserveStocks(ctx context.Context, req payload.ReserveStocksReq) ([]payload.ReserveStocksResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ReserveStocks")
	}

	var r0 []payload.ReserveStocksResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.ReserveStocksReq) ([]payload.ReserveStocksResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.ReserveStocksReq) []payload.ReserveStocksResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]payload.ReserveStocksResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.ReserveStocksReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackReserves provides a mock function with given fields: ctx, req
func (_m *StockService) RollbackReserves(ctx context.Context, req payload.RollbackReservesReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RollbackReserves")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.RollbackReservesReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferStock provides a mock function with given fields: ctx, req
func (_m *StockService) TransferStock(ctx context.Context, req payload.TransferStockReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TransferStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.TransferStockReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStockService creates a new instance of StockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockService {
	mock := &StockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
