// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	productservice "github.com/alifmufthi91/ecommerce-system/services/order/external/product_service"
	mock "github.com/stretchr/testify/mock"
)

// IProductSvc is an autogenerated mock type for the IProductSvc type
type IProductSvc struct {
	mock.Mock
}

// GetProductByID provides a mock function with given fields: ctx, req
func (_m *IProductSvc) GetProductByID(ctx context.Context, req productservice.GetProductByIDReq) (productservice.GetProductByIDResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 productservice.GetProductByIDResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, productservice.GetProductByIDReq) (productservice.GetProductByIDResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, productservice.GetProductByIDReq) productservice.GetProductByIDResp); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(productservice.GetProductByIDResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, productservice.GetProductByIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductSvc creates a new instance of IProductSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductSvc {
	mock := &IProductSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
