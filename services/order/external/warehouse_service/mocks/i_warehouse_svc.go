// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	warehouseservice "github.com/alifmufthi91/ecommerce-system/services/order/external/warehouse_service"
	mock "github.com/stretchr/testify/mock"
)

// IWarehouseSvc is an autogenerated mock type for the IWarehouseSvc type
type IWarehouseSvc struct {
	mock.Mock
}

// CommitReserves provides a mock function with given fields: ctx, req
func (_m *IWarehouseSvc) CommitReserves(ctx context.Context, req warehouseservice.CommitReservesReq) (warehouseservice.CommitReservesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CommitReserves")
	}

	var r0 warehouseservice.CommitReservesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, warehouseservice.CommitReservesReq) (warehouseservice.CommitReservesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, warehouseservice.CommitReservesReq) warehouseservice.CommitReservesResp); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(warehouseservice.CommitReservesResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, warehouseservice.CommitReservesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveStocks provides a mock function with given fields: ctx, req
func (_m *IWarehouseSvc) ReserveStocks(ctx context.Context, req warehouseservice.ReserveStocksReq) (warehouseservice.ReserveStocksResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ReserveStocks")
	}

	var r0 warehouseservice.ReserveStocksResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, warehouseservice.ReserveStocksReq) (warehouseservice.ReserveStocksResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, warehouseservice.ReserveStocksReq) warehouseservice.ReserveStocksResp); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(warehouseservice.ReserveStocksResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, warehouseservice.ReserveStocksReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackReserves provides a mock function with given fields: ctx, req
func (_m *IWarehouseSvc) RollbackReserves(ctx context.Context, req warehouseservice.RollbackReservesReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RollbackReserves")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, warehouseservice.RollbackReservesReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIWarehouseSvc creates a new instance of IWarehouseSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWarehouseSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWarehouseSvc {
	mock := &IWarehouseSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
