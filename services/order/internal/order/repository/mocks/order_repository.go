// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/alifmufthi91/ecommerce-system/services/order/internal/model"

	payload "github.com/alifmufthi91/ecommerce-system/services/order/internal/order/payload"

	repository "github.com/alifmufthi91/ecommerce-system/services/order/internal/order/repository"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepository) CreateOrder(ctx context.Context, order *model.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderByID provides a mock function with given fields: ctx, orderID
func (_m *OrderRepository) GetOrderByID(ctx context.Context, orderID string) (model.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, req
func (_m *OrderRepository) GetOrders(ctx context.Context, req payload.GetOrdersReq) ([]model.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetOrdersReq) ([]model.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetOrdersReq) []model.Order); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.GetOrdersReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepository) UpdateOrder(ctx context.Context, order *model.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithLockForUpdate provides a mock function with no fields
func (_m *OrderRepository) WithLockForUpdate() repository.OrderRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithLockForUpdate")
	}

	var r0 repository.OrderRepository
	if rf, ok := ret.Get(0).(func() repository.OrderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.OrderRepository)
		}
	}

	return r0
}

// WithReturning provides a mock function with no fields
func (_m *OrderRepository) WithReturning() repository.OrderRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithReturning")
	}

	var r0 repository.OrderRepository
	if rf, ok := ret.Get(0).(func() repository.OrderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.OrderRepository)
		}
	}

	return r0
}

// WithTX provides a mock function with given fields: tx
func (_m *OrderRepository) WithTX(tx *gorm.DB) repository.OrderRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTX")
	}

	var r0 repository.OrderRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.OrderRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.OrderRepository)
		}
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
