// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alifmufthi91/ecommerce-system/services/order/internal/model"
	payload "github.com/alifmufthi91/ecommerce-system/services/order/internal/order/payload"
	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// CompleteOrder provides a mock function with given fields: ctx, req
func (_m *OrderService) CompleteOrder(ctx context.Context, req payload.CompleteOrderReq) (model.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.CompleteOrderReq) (model.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.CompleteOrderReq) model.Order); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.CompleteOrderReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: ctx, req
func (_m *OrderService) CreateOrder(ctx context.Context, req payload.CreateOrderReq) (model.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.CreateOrderReq) (model.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.CreateOrderReq) model.Order); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.CreateOrderReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, req
func (_m *OrderService) GetOrders(ctx context.Context, req payload.GetOrdersReq) ([]model.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetOrdersReq) ([]model.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.GetOrdersReq) []model.Order); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.GetOrdersReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessExpiredOrders provides a mock function with given fields: ctx
func (_m *OrderService) ProcessExpiredOrders(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProcessExpiredOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
